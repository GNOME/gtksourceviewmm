// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCELANGUAGE_H
#define _GTKSOURCEVIEWMM_SOURCELANGUAGE_H

#include <glibmm.h>

/* sourcebuffer.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <gtksourceviewmm/sourcetag.h>
#include <gtksourceviewmm/sourcestylescheme.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceLanguage GtkSourceLanguage;
typedef struct _GtkSourceLanguageClass GtkSourceLanguageClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace gtksourceview
{ class SourceLanguage_Class; } // namespace gtksourceview
namespace gtksourceview
{

class SourceLanguagesManager ;


class SourceLanguage : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef SourceLanguage CppObjectType;
  typedef SourceLanguage_Class CppClassType;
  typedef GtkSourceLanguage BaseObjectType;
  typedef GtkSourceLanguageClass BaseClassType;

private:  friend class SourceLanguage_Class;
  static CppClassType sourcelanguage_class_;

private:
  // noncopyable
  SourceLanguage(const SourceLanguage&);
  SourceLanguage& operator=(const SourceLanguage&);

protected:
  explicit SourceLanguage(const Glib::ConstructParams& construct_params);
  explicit SourceLanguage(GtkSourceLanguage* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~SourceLanguage();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceLanguage*       gobj()       { return reinterpret_cast<GtkSourceLanguage*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkSourceLanguage* gobj() const { return reinterpret_cast<GtkSourceLanguage*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkSourceLanguage* gobj_copy();

private:


protected:

  friend class SourceLanguagesManager ;
  SourceLanguage();

public:

  
  Glib::ustring get_id();
  
  Glib::ustring get_name();
  
  Glib::ustring get_section();
  
  Glib::SListHandle<Glib::RefPtr<SourceTag> > get_tags();
  
  gunichar get_escape_char();

  
  Glib::SListHandle<Glib::ustring> get_mime_types() const;


  void set_mime_types(const Glib::SListHandle<const Glib::ustring>& mime_types);
  
  
  Glib::RefPtr<SourceStyleScheme> get_style_scheme();
  
  void set_style_scheme(Glib::RefPtr<SourceStyleScheme> scheme);

  
  SourceTagStyle get_tag_style(const Glib::ustring& tag_id);
  
  void set_tag_style(const Glib::ustring& tag_id, const SourceTagStyle& style);
  
  SourceTagStyle get_tag_default_style(const Glib::ustring& tag_id);


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} /* namespace gtksourceview */


namespace Glib
{
  /** @relates gtksourceview::SourceLanguage
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Glib::RefPtr<gtksourceview::SourceLanguage> wrap(GtkSourceLanguage* object, bool take_copy = false);
}


#endif /* _GTKSOURCEVIEWMM_SOURCELANGUAGE_H */

