// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/sourcelanguagesmanager.h>
#include <gtksourceviewmm/private/sourcelanguagesmanager_p.h>

#include <gtksourceview/gtksourcelanguagesmanager.h>
#include <gtksourceview/gtksourceview-typebuiltins.h>
/* GtkSourceView::SourceView
 *
 * Copyright 2004-2005 Jae Jang
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include "gtksourceviewmm/sourcelanguagesmanager.h"

namespace gtksourceview
{

Glib::RefPtr<SourceLanguage>
SourceLanguagesManager::get_language_from_mime_type (const Glib::ustring &mime_type)
{
    Glib::RefPtr<SourceLanguage> result =
        Glib::wrap(gtk_source_languages_manager_get_language_from_mime_type
                                (gobj(),
                                 mime_type.c_str()),
                   true) ;
    return result ;
}

}//end namespace gtksourceview


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<gtksourceview::SourceLanguagesManager> wrap(GtkSourceLanguagesManager* object, bool take_copy)
{
  return Glib::RefPtr<gtksourceview::SourceLanguagesManager>( dynamic_cast<gtksourceview::SourceLanguagesManager*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace gtksourceview
{


/* The *_Class implementation: */

const Glib::Class& SourceLanguagesManager_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SourceLanguagesManager_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_languages_manager_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void SourceLanguagesManager_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


Glib::ObjectBase* SourceLanguagesManager_Class::wrap_new(GObject* object)
{
  return new SourceLanguagesManager((GtkSourceLanguagesManager*)object);
}


/* The implementation: */

GtkSourceLanguagesManager* SourceLanguagesManager::gobj_copy()
{
  reference();
  return gobj();
}

SourceLanguagesManager::SourceLanguagesManager(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{}

SourceLanguagesManager::SourceLanguagesManager(GtkSourceLanguagesManager* castitem)
:
  Glib::Object((GObject*)(castitem))
{}

SourceLanguagesManager::~SourceLanguagesManager()
{}


SourceLanguagesManager::CppClassType SourceLanguagesManager::sourcelanguagesmanager_class_; // initialize static member

GType SourceLanguagesManager::get_type()
{
  return sourcelanguagesmanager_class_.init().get_type();
}

GType SourceLanguagesManager::get_base_type()
{
  return gtk_source_languages_manager_get_type();
}


SourceLanguagesManager::SourceLanguagesManager()
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Glib::Object(Glib::ConstructParams(sourcelanguagesmanager_class_.init()))
{
  }

Glib::SListHandle<Glib::RefPtr<SourceLanguage> > SourceLanguagesManager::get_available_language()
{
  return Glib::SListHandle<Glib::RefPtr<SourceLanguage> >((GSList*)gtk_source_languages_manager_get_available_languages(gobj()), Glib::OWNERSHIP_NONE);
}

Glib::SListHandle<Glib::ustring> SourceLanguagesManager::get_lang_files_dirs()
{
  return Glib::SListHandle<Glib::ustring>((GSList*)gtk_source_languages_manager_get_lang_files_dirs(gobj()), Glib::OWNERSHIP_NONE);
}


#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace gtksourceview


