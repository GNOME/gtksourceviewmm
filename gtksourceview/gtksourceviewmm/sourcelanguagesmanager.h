// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCELANGUAGESMANAGER_H
#define _GTKSOURCEVIEWMM_SOURCELANGUAGESMANAGER_H


#include <glibmm.h>

/* sourcebuffer.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <gtksourceviewmm/sourcelanguage.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceLanguagesManager GtkSourceLanguagesManager;
typedef struct _GtkSourceLanguagesManagerClass GtkSourceLanguagesManagerClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace gtksourceview
{ class SourceLanguagesManager_Class; } // namespace gtksourceview
namespace gtksourceview
{


class SourceLanguagesManager : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef SourceLanguagesManager CppObjectType;
  typedef SourceLanguagesManager_Class CppClassType;
  typedef GtkSourceLanguagesManager BaseObjectType;
  typedef GtkSourceLanguagesManagerClass BaseClassType;

private:  friend class SourceLanguagesManager_Class;
  static CppClassType sourcelanguagesmanager_class_;

private:
  // noncopyable
  SourceLanguagesManager(const SourceLanguagesManager&);
  SourceLanguagesManager& operator=(const SourceLanguagesManager&);

protected:
  explicit SourceLanguagesManager(const Glib::ConstructParams& construct_params);
  explicit SourceLanguagesManager(GtkSourceLanguagesManager* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~SourceLanguagesManager();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceLanguagesManager*       gobj()       { return reinterpret_cast<GtkSourceLanguagesManager*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkSourceLanguagesManager* gobj() const { return reinterpret_cast<GtkSourceLanguagesManager*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkSourceLanguagesManager* gobj_copy();

private:

  public:
    SourceLanguagesManager();

    
  Glib::SListHandle<Glib::RefPtr<SourceLanguage> > get_available_language();
    //_WRAP_METHOD(SourceLanguage& get_language_from_mime_type(const Glib::ustring &mime_type), gtk_source_languages_manager_get_language_from_mime_type)
    Glib::RefPtr<SourceLanguage> get_language_from_mime_type (const Glib::ustring &mime_type) ;
    
    
  Glib::SListHandle<Glib::ustring> get_lang_files_dirs();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::


};

} /* namespace gtksourceview */


namespace Glib
{
  /** @relates gtksourceview::SourceLanguagesManager
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Glib::RefPtr<gtksourceview::SourceLanguagesManager> wrap(GtkSourceLanguagesManager* object, bool take_copy = false);
}


#endif /* _GTKSOURCEVIEWMM_SOURCELANGUAGESMANAGER_H */

