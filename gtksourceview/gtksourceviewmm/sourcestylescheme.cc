// Generated by gtkmmproc -- DO NOT MODIFY!

#include <gtksourceviewmm/sourcestylescheme.h>
#include <gtksourceviewmm/private/sourcestylescheme_p.h>

/* sourcetag.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<gtksourceview::SourceStyleScheme> wrap(GtkSourceStyleScheme* object, bool take_copy)
{
  return Glib::RefPtr<gtksourceview::SourceStyleScheme>( dynamic_cast<gtksourceview::SourceStyleScheme*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace gtksourceview
{


/* The *_Class implementation: */

const Glib::Interface_Class& SourceStyleScheme_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &SourceStyleScheme_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gtk_source_style_scheme_get_type();
  }

  return *this;
}

void SourceStyleScheme_Class::iface_init_function(void* g_iface, void*)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != 0); 

}


Glib::ObjectBase* SourceStyleScheme_Class::wrap_new(GObject* object)
{
  return new SourceStyleScheme((GtkSourceStyleScheme*)(object));
}


/* The implementation: */

SourceStyleScheme::SourceStyleScheme()
:
  Glib::Interface(sourcestylescheme_class_.init())
{}

SourceStyleScheme::SourceStyleScheme(GtkSourceStyleScheme* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

SourceStyleScheme::~SourceStyleScheme()
{}

// static
void SourceStyleScheme::add_interface(GType gtype_implementer)
{
  sourcestylescheme_class_.init().add_interface(gtype_implementer);
}

SourceStyleScheme::CppClassType SourceStyleScheme::sourcestylescheme_class_; // initialize static member

GType SourceStyleScheme::get_type()
{
  return sourcestylescheme_class_.init().get_type();
}

GType SourceStyleScheme::get_base_type()
{
  return gtk_source_style_scheme_get_type();
}


SourceTagStyle SourceStyleScheme::get_tag_style(const Glib::ustring & a_style_name)
{
  return Glib::wrap (gtk_source_style_scheme_get_tag_style(gobj(), a_style_name.c_str()));
}

Glib::ustring SourceStyleScheme::get_name()
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_source_style_scheme_get_name(gobj()));
}

Glib::SListHandle<Glib::ustring> SourceStyleScheme::get_style_names()
{
  return Glib::SListHandle<Glib::ustring>(gtk_source_style_scheme_get_style_names(gobj()), Glib::OWNERSHIP_DEEP);
}

Glib::RefPtr<SourceStyleScheme> SourceStyleScheme::get_default()
{
  return Glib::wrap(gtk_source_style_scheme_get_default());
}


} // namespace gtksourceview


