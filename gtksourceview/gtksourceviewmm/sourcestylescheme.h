// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCESTYLESCHEME_H
#define _GTKSOURCEVIEWMM_SOURCESTYLESCHEME_H


#include <glibmm.h>

/* sourcetag.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#include <glibmm/interface.h>
#include <gtksourceviewmm/sourcetagstyle.h>
#include <gtksourceview/gtksourcestylescheme.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceStyleScheme GtkSourceStyleScheme;
typedef struct _GtkSourceStyleSchemeClass GtkSourceStyleSchemeClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace gtksourceview
{ class SourceStyleScheme_Class; } // namespace gtksourceview
namespace gtksourceview
{


class SourceStyleScheme : public Glib::Interface
{

    
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef SourceStyleScheme CppObjectType;
  typedef SourceStyleScheme_Class CppClassType;
  typedef GtkSourceStyleScheme BaseObjectType;
  typedef GTypeInterface BaseClassType;

private:
  friend class SourceStyleScheme_Class;
  static CppClassType sourcestylescheme_class_;

  // noncopyable
  SourceStyleScheme(const SourceStyleScheme&);
  SourceStyleScheme& operator=(const SourceStyleScheme&);

protected:
  SourceStyleScheme(); // you must derive from this class
  explicit SourceStyleScheme(GtkSourceStyleScheme* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~SourceStyleScheme();

  static void add_interface(GType gtype_implementer);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceStyleScheme*       gobj()       { return reinterpret_cast<GtkSourceStyleScheme*>(gobject_); }

  ///Provides access to the underlying C GObject.  
  const GtkSourceStyleScheme* gobj() const { return reinterpret_cast<GtkSourceStyleScheme*>(gobject_); }

private:


public:

    
  SourceTagStyle get_tag_style(const Glib::ustring &a_style_name);

    
  Glib::ustring get_name();
    
  Glib::SListHandle<Glib::ustring> get_style_names();
    
  static Glib::RefPtr<SourceStyleScheme> get_default();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::


};//end class SourceStyleScheme

}//end namespace gtksourceview


namespace Glib
{
  /** @relates gtksourceview::SourceStyleScheme
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Glib::RefPtr<gtksourceview::SourceStyleScheme> wrap(GtkSourceStyleScheme* object, bool take_copy = false);

} // namespace Glib


#endif /* _GTKSOURCEVIEWMM_SOURCESTYLESCHEME_H */

