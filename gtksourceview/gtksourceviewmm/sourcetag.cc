// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/sourcetag.h>
#include <gtksourceviewmm/private/sourcetag_p.h>

/* sourcetag.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#include <gtksourceviewmm/sourcetag.h>
#include <gtksourceviewmm/private/sourcetag_p.h>
#include <gtkmm/private/texttag_p.h>

namespace gtksourceview
{

Glib::RefPtr<SourceTag>
SourceTag::create_syntax_tag (const Glib::ustring &a_id,
                              const Glib::ustring &a_name,
                              const Glib::ustring &a_pat_start,
                              const Glib::ustring &a_pat_end)
{
    return Glib::wrap (GTK_SOURCE_TAG (gtk_syntax_tag_new (a_id.c_str (),
                                       a_name.c_str (),
                                       a_pat_start.c_str (),
                                       a_pat_end.c_str ()))) ;
}

Glib::RefPtr<SourceTag>
SourceTag::create_pattern_tag (const Glib::ustring &a_id,
                               const Glib::ustring &a_name,
                               const Glib::ustring &a_pattern)
{
    return Glib::wrap (GTK_SOURCE_TAG (gtk_pattern_tag_new (a_id.c_str (),
                                       a_name.c_str (),
                                       a_pattern.c_str ()))) ;
}

Glib::RefPtr<SourceTag>
SourceTag::create_keyword_list_tag (const Glib::ustring &a_id,
                                    const Glib::ustring &a_name,
                                    const Glib::SListHandle<const Glib::ustring> &a_keywords,
                                    bool a_case_sensitive,
                                    bool a_match_empty_string_at_beginning,
                                    bool a_match_empty_string_at_end,
                                    const Glib::ustring &a_beginning_regex,
                                    const Glib::ustring &a_end_regex)
{
    return Glib::wrap (GTK_SOURCE_TAG (gtk_keyword_list_tag_new (a_id.c_str (),
                                       a_name.c_str (),
                                       a_keywords.data (),
                                       a_case_sensitive,
                                       a_match_empty_string_at_beginning,
                                       a_match_empty_string_at_end,
                                       a_beginning_regex.c_str (),
                                       a_end_regex.c_str ()))) ;
}

Glib::RefPtr<SourceTag>
SourceTag::create_line_comment_tag_new (const Glib::ustring &a_id,
                                        const Glib::ustring &a_name,
                                        const Glib::ustring &a_pattern_start)
{
    return Glib::wrap (GTK_SOURCE_TAG (gtk_line_comment_tag_new (a_id.c_str (),
                                       a_name.c_str (),
                                       a_pattern_start.c_str ()))) ;
}

Glib::RefPtr<SourceTag>
SourceTag::create_string_tag_new (const Glib::ustring &a_id,
                                  const Glib::ustring &a_name,
                                  const Glib::ustring &a_pattern_start,
                                  const Glib::ustring &a_pattern_end,
                                  bool a_end_at_line_end)
{
    return Glib::wrap (GTK_SOURCE_TAG (gtk_string_tag_new (a_id.c_str (),
                                       a_name.c_str (),
                                       a_pattern_start.c_str (),
                                       a_pattern_end.c_str (),
                                       a_end_at_line_end))) ;
}

}//end namespace gtksourceview


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<gtksourceview::SourceTag> wrap(GtkSourceTag* object, bool take_copy)
{
  return Glib::RefPtr<gtksourceview::SourceTag>( dynamic_cast<gtksourceview::SourceTag*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace gtksourceview
{


/* The *_Class implementation: */

const Glib::Class& SourceTag_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SourceTag_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_tag_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  }

  return *this;
}

void SourceTag_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


Glib::ObjectBase* SourceTag_Class::wrap_new(GObject* object)
{
  return new SourceTag((GtkSourceTag*)object);
}


/* The implementation: */

GtkSourceTag* SourceTag::gobj_copy()
{
  reference();
  return gobj();
}

SourceTag::SourceTag(const Glib::ConstructParams& construct_params)
:
  Gtk::TextTag(construct_params)
{}

SourceTag::SourceTag(GtkSourceTag* castitem)
:
  Gtk::TextTag((GtkTextTag*)(castitem))
{}

SourceTag::~SourceTag()
{}


SourceTag::CppClassType SourceTag::sourcetag_class_; // initialize static member

GType SourceTag::get_type()
{
  return sourcetag_class_.init().get_type();
}

GType SourceTag::get_base_type()
{
  return gtk_source_tag_get_type();
}


SourceTag::SourceTag()
:
  Glib::ObjectBase(0), //Mark this class as gtkmmproc-generated, rather than a custom class, to allow vfunc optimisations.
  Gtk::TextTag(Glib::ConstructParams(sourcetag_class_.init()))
{
  }

Glib::ustring SourceTag::get_id()
{
  return Glib::convert_return_gchar_ptr_to_ustring(gtk_source_tag_get_id(gobj()));
}

SourceTagStyle SourceTag::get_style()
{
  return Glib::wrap (gtk_source_tag_get_style(gobj()));
}

void SourceTag::set_style(const SourceTagStyle& a_style)
{
gtk_source_tag_set_style(gobj(), a_style.gobj()); 
}


#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace gtksourceview


