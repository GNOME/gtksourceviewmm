// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCETAG_H
#define _GTKSOURCEVIEWMM_SOURCETAG_H

#include <glibmm.h>

/* sourcetag.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/slisthandle.h>
#include <gtkmm/textbuffer.h>
#include <gtksourceviewmm/sourcetagstyle.h>
#include <gtksourceview/gtksourcetag.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceTag GtkSourceTag;
typedef struct _GtkSourceTagClass GtkSourceTagClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace gtksourceview
{ class SourceTag_Class; } // namespace gtksourceview
namespace gtksourceview
{


class SourceTag : public Gtk::TextTag
{
    
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef SourceTag CppObjectType;
  typedef SourceTag_Class CppClassType;
  typedef GtkSourceTag BaseObjectType;
  typedef GtkSourceTagClass BaseClassType;

private:  friend class SourceTag_Class;
  static CppClassType sourcetag_class_;

private:
  // noncopyable
  SourceTag(const SourceTag&);
  SourceTag& operator=(const SourceTag&);

protected:
  explicit SourceTag(const Glib::ConstructParams& construct_params);
  explicit SourceTag(GtkSourceTag* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~SourceTag();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceTag*       gobj()       { return reinterpret_cast<GtkSourceTag*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkSourceTag* gobj() const { return reinterpret_cast<GtkSourceTag*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkSourceTag* gobj_copy();

private:


protected:
    SourceTag();

public:
    static Glib::RefPtr<SourceTag> create_syntax_tag (const Glib::ustring &a_id,
                                                      const Glib::ustring &a_name,
                                                      const Glib::ustring &a_pat_start,
                                                      const Glib::ustring &a_pat_end);
    

    static Glib::RefPtr<SourceTag> create_pattern_tag (const Glib::ustring &a_id,
                                                       const Glib::ustring &a_name,
                                                       const Glib::ustring &a_pattern);
    

    static Glib::RefPtr<SourceTag> create_keyword_list_tag (const Glib::ustring &a_id,
                                                            const Glib::ustring &a_name,
                                                            const Glib::SListHandle<const Glib::ustring> &a_keywords,
                                                            bool a_case_sensitive,
                                                            bool a_match_empty_string_at_beginning,
                                                            bool a_match_empty_string_at_end,
                                                            const Glib::ustring &a_beginning_regex,
                                                            const Glib::ustring &a_end_regex) ;
    

    static Glib::RefPtr<SourceTag> create_line_comment_tag_new (const Glib::ustring &a_id,
                                                                const Glib::ustring &a_name,
                                                                const Glib::ustring &a_pattern_start) ;
    

    static Glib::RefPtr<SourceTag> create_string_tag_new (const Glib::ustring &a_id,
                                                          const Glib::ustring &a_name,
                                                          const Glib::ustring &a_pattern_start,
                                                          const Glib::ustring &a_patten_end,
                                                          bool a_end_at_line_end) ;
    

  Glib::ustring get_id();
    
  SourceTagStyle get_style();
    
  void set_style(const SourceTagStyle& a_style);


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};//end class SourceTag

}//end namespace gtksourceview


namespace Glib
{
  /** @relates gtksourceview::SourceTag
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  Glib::RefPtr<gtksourceview::SourceTag> wrap(GtkSourceTag* object, bool take_copy = false);
}


#endif /* _GTKSOURCEVIEWMM_SOURCETAG_H */

