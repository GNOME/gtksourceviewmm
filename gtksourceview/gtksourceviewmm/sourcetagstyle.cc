// Generated by gtkmmproc -- DO NOT MODIFY!

#include <gtksourceviewmm/sourcetagstyle.h>
#include <gtksourceviewmm/private/sourcetagstyle_p.h>

#include <gtksourceview/gtksourcetagstyle.h>
#include <gtksourceview/gtksourceview-typebuiltins.h>
/* sourcetagstyle.ccg
 *
 * Copyright 2004-2005 Jae Jang
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksourceviewmm/sourcetagstyle.h>

namespace gtksourceview
{
SourceTagStyle::SourceTagStyle ()
{
    GtkSourceTagStyle tmp ;
    memset (&tmp, 0, sizeof (GtkSourceTagStyle)) ;
    gobject_ = gtk_source_tag_style_copy (&tmp) ;
}
}//end namespace gtksourceview


namespace
{
} // anonymous namespace


namespace Glib
{

gtksourceview::SourceTagStyle wrap(GtkSourceTagStyle* object, bool take_copy)
{
  return gtksourceview::SourceTagStyle(object, take_copy);
}

} // namespace Glib


namespace gtksourceview
{


// static
GType SourceTagStyle::get_type()
{
  return gtk_source_tag_style_get_type();
}


SourceTagStyle::SourceTagStyle(const SourceTagStyle& other)
:
  gobject_ ((other.gobject_) ? gtk_source_tag_style_copy(other.gobject_) : 0)
{}

SourceTagStyle::SourceTagStyle(GtkSourceTagStyle* gobject, bool make_a_copy)
:
  // For BoxedType wrappers, make_a_copy is true by default.  The static
  // BoxedType wrappers must always take a copy, thus make_a_copy = true
  // ensures identical behaviour if the default argument is used.
  gobject_ ((make_a_copy && gobject) ? gtk_source_tag_style_copy(gobject) : gobject)
{}

SourceTagStyle& SourceTagStyle::operator=(const SourceTagStyle& other)
{
  SourceTagStyle temp (other);
  swap(temp);
  return *this;
}

SourceTagStyle::~SourceTagStyle()
{
  if(gobject_)
    gtk_source_tag_style_free(gobject_);
}

void SourceTagStyle::swap(SourceTagStyle& other)
{
  GtkSourceTagStyle *const temp = gobject_;
  gobject_ = other.gobject_;
  other.gobject_ = temp;
}

GtkSourceTagStyle* SourceTagStyle::gobj_copy() const
{
  return gtk_source_tag_style_copy(gobject_);
}


bool SourceTagStyle::get_is_default() const
{
  return gobj()->is_default;
}

void SourceTagStyle::set_is_default(const bool& value)
{
  gobj()->is_default = static_cast<int>(value);
}

guint SourceTagStyle::get_mask() const
{
  return gobj()->mask;
}

void SourceTagStyle::set_mask(const guint& value)
{
  gobj()->mask = value;
}

Gdk::Color SourceTagStyle::get_foreground() const
{
  return Gdk::Color(const_cast<GdkColor*>(&(gobj()->foreground)), true);
}

void SourceTagStyle::set_foreground(const Gdk::Color& value)
{
  gobj()->foreground = (*(value).gobj());
}

Gdk::Color SourceTagStyle::get_background() const
{
  return Gdk::Color(const_cast<GdkColor*>(&(gobj()->background)), true);
}

void SourceTagStyle::set_background(const Gdk::Color& value)
{
  gobj()->background = (*(value).gobj());
}

bool SourceTagStyle::get_italic() const
{
  return gobj()->italic;
}

void SourceTagStyle::set_italic(const bool& value)
{
  gobj()->italic = static_cast<int>(value);
}

bool SourceTagStyle::get_bold() const
{
  return gobj()->bold;
}

void SourceTagStyle::set_bold(const bool& value)
{
  gobj()->bold = static_cast<int>(value);
}

bool SourceTagStyle::get_underline() const
{
  return gobj()->underline;
}

void SourceTagStyle::set_underline(const bool& value)
{
  gobj()->underline = static_cast<int>(value);
}

bool SourceTagStyle::get_strikethrough() const
{
  return gobj()->strikethrough;
}

void SourceTagStyle::set_strikethrough(const bool& value)
{
  gobj()->strikethrough = static_cast<int>(value);
}


} // namespace gtksourceview


