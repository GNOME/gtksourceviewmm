// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCETAGSTYLE_H
#define _GTKSOURCEVIEWMM_SOURCETAGSTYLE_H

#include <glibmm.h>

/* sourcetagstyle.hg
 * 
 * Copyright (C) 2005-2006 The gtksourceviewmm development team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm.h>
#include <gdkmm/color.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C" { typedef struct _GtkSourceTagStyle GtkSourceTagStyle; }
#endif

namespace gtksourceview {

class SourceTagStyle
{
    public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef SourceTagStyle CppObjectType;
  typedef GtkSourceTagStyle BaseObjectType;

  static GType get_type() G_GNUC_CONST;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


  explicit SourceTagStyle(GtkSourceTagStyle* gobject, bool make_a_copy = true);

  SourceTagStyle(const SourceTagStyle& other);
  SourceTagStyle& operator=(const SourceTagStyle& other);

  ~SourceTagStyle();

  void swap(SourceTagStyle& other);

  ///Provides access to the underlying C instance.
  GtkSourceTagStyle*       gobj()       { return gobject_; }

  ///Provides access to the underlying C instance.
  const GtkSourceTagStyle* gobj() const { return gobject_; }

  ///Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs.
  GtkSourceTagStyle* gobj_copy() const;

protected:
  GtkSourceTagStyle* gobject_;

private:


    public:

    
    SourceTagStyle () ;

    bool get_is_default() const;
    void set_is_default(const bool& value);

    guint get_mask() const;
    void set_mask(const guint& value);

    Gdk::Color get_foreground() const;
    void set_foreground(const Gdk::Color& value);

    Gdk::Color get_background() const;
    void set_background(const Gdk::Color& value);

    bool get_italic() const;
    void set_italic(const bool& value);

    bool get_bold() const;
    void set_bold(const bool& value);

    bool get_underline() const;
    void set_underline(const bool& value);

    bool get_strikethrough() const;
    void set_strikethrough(const bool& value);


};//end class SourceTagStyle

}//end namespace gtksourceview


namespace gtksourceview
{

/** @relates gtksourceview::SourceTagStyle
 * @param lhs The left-hand side
 * @param rhs The right-hand side
 */
inline void swap(SourceTagStyle& lhs, SourceTagStyle& rhs)
  { lhs.swap(rhs); }

} // namespace gtksourceview

namespace Glib
{

/** @relates gtksourceview::SourceTagStyle
 * @param object The C instance
 * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
 * @result A C++ instance that wraps this C instance.
 */
gtksourceview::SourceTagStyle wrap(GtkSourceTagStyle* object, bool take_copy = false);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
template <>
class Value<gtksourceview::SourceTagStyle> : public Glib::Value_Boxed<gtksourceview::SourceTagStyle>
{};
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Glib

#endif /* _GTKSOURCEVIEWMM_SOURCETAGSTYLE_H */

