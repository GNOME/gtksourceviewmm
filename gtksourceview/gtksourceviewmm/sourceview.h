// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCEVIEW_H
#define _GTKSOURCEVIEWMM_SOURCEVIEW_H

#include <glibmm.h>

/* sourceview.hg
 * 
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/textview.h>
#include <gtksourceviewmm/sourcebuffer.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceView GtkSourceView;
typedef struct _GtkSourceViewClass GtkSourceViewClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace gtksourceview
{ class SourceView_Class; } // namespace gtksourceview
namespace gtksourceview
{

/** Multi-line source editing widget. It displays a Gtk::SourceBuffer.
 */


class SourceView : public Gtk::TextView
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef SourceView CppObjectType;
  typedef SourceView_Class CppClassType;
  typedef GtkSourceView BaseObjectType;
  typedef GtkSourceViewClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~SourceView();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class SourceView_Class;
  static CppClassType sourceview_class_;

  // noncopyable
  SourceView(const SourceView&);
  SourceView& operator=(const SourceView&);

protected:
  explicit SourceView(const Glib::ConstructParams& construct_params);
  explicit SourceView(GtkSourceView* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkSourceView*       gobj()       { return reinterpret_cast<GtkSourceView*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkSourceView* gobj() const { return reinterpret_cast<GtkSourceView*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  virtual void on_redo();
  virtual void on_undo();


private:


public:
  //_CTOR_DEFAULT(gtk_source_view_new_val) ;
  //_WRAP_CTOR (SourceView (Glib::RefPtr<SourceBuffer> &buffer), gtk_source_view_new_with_buffer)
  explicit SourceView () ;
  explicit SourceView (Glib::RefPtr<SourceBuffer> &buffer) ;


  static Glib::RefPtr<SourceView> create();

  
  static Glib::RefPtr<SourceView> create(Glib::RefPtr<SourceBuffer> & buffer);


  Glib::RefPtr<const SourceBuffer> get_source_buffer () const ;
  Glib::RefPtr<SourceBuffer> get_source_buffer () ;
  void set_source_buffer (Glib::RefPtr<SourceBuffer> &source_buffer) ;

  
  void set_show_line_numbers(bool show);
  
  bool get_show_line_numbers();

  
  void set_show_line_markers(bool show);
  
  bool get_show_line_markers();

  
  void set_tabs_width(guint width);
  
  guint get_tabs_width();

  
  void set_auto_indent(bool enable);
  
  bool get_auto_indent();

  
  void set_insert_spaces_instead_of_tabs(bool enable);
  
  bool get_insert_spaces_instead_of_tabs();

  
  void set_show_margin(bool show);
  
  bool get_show_margin();

  
  void set_highlight_current_line(bool highlight);
  
  bool get_highlight_current_line();
  
  
  void set_margin(guint margin);
  
  guint get_margin();

  
  void set_marker_pixbuf(const Glib::ustring& marker, Glib::RefPtr<Gdk::Pixbuf> pixbuf);
  
  Glib::RefPtr<Gdk::Pixbuf> get_marker_pixbuf(const Glib::ustring& marker);

  
  void set_smart_home_end(bool enable);
  
  bool get_smart_home_end();

  
  Glib::SignalProxy0< void > signal_redo();


  Glib::SignalProxy0< void > signal_undo();


};

} /* namespace gtksourceview */


namespace Glib
{
  /** @relates gtksourceview::SourceView
   * @param object The C instance
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   */
  gtksourceview::SourceView* wrap(GtkSourceView* object, bool take_copy = false);
}
#endif /* _GTKSOURCEVIEWMM_SOURCEVIEW_H */

