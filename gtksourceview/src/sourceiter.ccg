/* sourceiter.cc
 *
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C) 2005-2006 Dodji Seketeli
 * Copyright (C) 2010 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include "sourceiter.h"
#include <glib/gmessages.h>
#include <gtksourceview/gtksourceview-typebuiltins.h>
namespace gtksourceview
{

SourceIter::SourceIter ()
{
}

SourceIter::SourceIter (const Gtk::TextIter &iter) :
    Gtk::TextIter (iter)
{
}

SourceIter::SourceIter (const GtkTextIter* gobject) :
    Gtk::TextIter (gobject)
{
}

SourceIter::SourceIter (const SourceIter &a_iter) :
    Gtk::TextIter (a_iter)
{
    if (a_iter == *this) {return;}
    *this = a_iter ;
}

SourceIter::~SourceIter ()
{
}

bool
SourceIter::forward_search (const Glib::ustring &str,
                            SourceSearchFlags flags,
                            Gtk::TextIter &match_start,
                            Gtk::TextIter &match_end,
                            const Gtk::TextIter &limit) const
{
  return gtk_source_iter_forward_search(const_cast<GtkTextIter*>(gobj()),
                                        str.c_str(),
                                        static_cast<GtkSourceSearchFlags>(flags),
                                        match_start.gobj(),
                                        match_end.gobj(),
                                        limit.gobj());
}

bool
SourceIter::backward_search (const Glib::ustring &str,
                              SourceSearchFlags flags,
                              Gtk::TextIter &match_start,
                              Gtk::TextIter &match_end,
                              const Gtk::TextIter &limit) const
{
  return gtk_source_iter_backward_search(const_cast<GtkTextIter*>(gobj()),
                                         str.c_str(),
                                         static_cast<GtkSourceSearchFlags>(flags),
                                         match_start.gobj(),
                                         match_end.gobj(),
                                         limit.gobj());
}

bool
SourceIter::forward_search (const Glib::ustring &str,
                            SourceSearchFlags flags,
                            Gtk::TextIter &match_start,
                            Gtk::TextIter &match_end) const
{
  return gtk_source_iter_forward_search(const_cast<GtkTextIter*>(gobj()),
                                        str.c_str(),
                                        static_cast<GtkSourceSearchFlags>(flags),
                                        match_start.gobj(),
                                        match_end.gobj(),
                                        0);
}

bool
SourceIter::backward_search (const Glib::ustring &str,
                              SourceSearchFlags flags,
                              Gtk::TextIter &match_start,
                              Gtk::TextIter &match_end) const
{
  return gtk_source_iter_backward_search(const_cast<GtkTextIter*>(gobj()),
                                         str.c_str(),
                                         static_cast<GtkSourceSearchFlags>(flags),
                                         match_start.gobj(),
                                         match_end.gobj(),
                                         0);
}

}//end namespace gtksourceview

