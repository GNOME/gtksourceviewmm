/* sourcelanguage.h
 *
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C) 2006 Dodji Seketeli
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/// \file
/// \brief the SourceLanguage class

#include <glibmm/object.h>
#include <gtksourceviewmm/sourcestylescheme.h>

_DEFS(gtksourceviewmm,gtksourceview)
_PINCLUDE(glibmm/private/object_p.h)


namespace gtksourceview
{

class SourceLanguageManager ;

_CC_INCLUDE(gtksourceview/gtksourcelanguage.h)
_CC_INCLUDE(gtksourceview/gtksourceview-typebuiltins.h)

/// \brief The abstraction of a language.
///
/// Languages are used in the syntax highlighting
/// workflow.
class SourceLanguage : public Glib::Object
{
  _CLASS_GOBJECT(SourceLanguage, GtkSourceLanguage, GTK_SOURCE_LANGUAGE, Glib::Object, GObject)

protected:
  _CTOR_DEFAULT()

public:

  // TODO: C API does not provide any constructor for GtkSourceLanguage, should we delete it on API/ABI break? krnowak
  /// \brief create a language.
  ///
  /// \return the newly created language
  _WRAP_CREATE()

  /// \brief get language ID
  ///
  /// a language ID is unique among language IDs.
  /// \return the language ID.
  _WRAP_METHOD(Glib::ustring get_id() const, gtk_source_language_get_id)

  /// \brief gets the localized name of the language.
  ///
  /// \return the localized name of the language
  _WRAP_METHOD(Glib::ustring get_name() const, gtk_source_language_get_name)

  /// \brief the localized section of the language.
  ///
  /// Each language belong to a section (ex. HTML belogs to the Markup section).
  /// \return the localized section of the language.
  _WRAP_METHOD(Glib::ustring get_section() const, gtk_source_language_get_section)

  /// \brief Whether the language should be hidden from the user.
  ///
  /// \return true if the language should be hidden, false otherwise.
  _WRAP_METHOD(gboolean get_hidden() const, gtk_source_language_get_hidden)

#m4 _CONVERSION(`gchar**',`Glib::StringArrayHandle',`Glib::StringArrayHandle($3, Glib::OWNERSHIP_DEEP)')
  /// \brief gets the list of mime types for the given language.
  ///
  /// After usage you should free each element of the list as well as the list itself.
  /// \return the list of  mime types for the given language.
  _WRAP_METHOD(Glib::StringArrayHandle get_mime_types() const, gtk_source_language_get_mime_types)
  _WRAP_METHOD(Glib::StringArrayHandle get_globs() const, gtk_source_language_get_globs)
  _WRAP_METHOD(Glib::StringArrayHandle get_style_ids() const, gtk_source_language_get_style_ids)

  _WRAP_METHOD(Glib::ustring get_style_name(const Glib::ustring& style_id) const, gtk_source_language_get_style_name)
  _WRAP_METHOD(Glib::ustring get_metadata(const Glib::ustring& name) const, gtk_source_language_get_metadata)
};

} /* namespace gtksourceview */
