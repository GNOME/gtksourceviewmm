/* sourcebuffer.hg
 * 
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C) 2006 Dodji Seketeli
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/// \file
/// the abstraction of a supported language.

#include <glibmm/object.h>
#include <gtksourceviewmm/sourcetag.h>
#include <gtksourceviewmm/sourcestylescheme.h>

_DEFS(gtksourceviewmm,gtksourceview)
_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(gtksourceviewmm/private/sourcetag_p.h)


namespace gtksourceview
{

class SourceLanguagesManager ;

_CC_INCLUDE(gtksourceview/gtksourcelanguage.h)
_CC_INCLUDE(gtksourceview/gtksourceview-typebuiltins.h)

/// \brief the abstraction of a language.
///
/// Languages are used in the syntax highlighting
/// workflow.
class SourceLanguage : public Glib::Object
{
  _CLASS_GOBJECT(SourceLanguage, GtkSourceLanguage, GTK_SOURCE_LANGUAGE, Glib::Object, GObject)

protected:
  _CTOR_DEFAULT()

public:

  /// \brief create a language.
  ///
  /// \return the newly created language
  _WRAP_CREATE()

  /// \brief get language ID
  ///
  /// a language ID is unique among language IDs.
  /// \return the langugae ID.
  _WRAP_METHOD(Glib::ustring get_id() const, gtk_source_language_get_id)

  /// \brief gets the localized name of the language.
  ///
  /// \return the localized name of the language
  _WRAP_METHOD(Glib::ustring get_name() const, gtk_source_language_get_name)

  /// \brief the localized section of the language.
  ///
  /// Each language belong to a section (ex. HTML belogs to the Markup section).
  /// \return the localized section of the language.
  _WRAP_METHOD(Glib::ustring get_section() const, gtk_source_language_get_section)

  /// \brief gets the list of tags associated to the given language.
  ///
  /// \return the list of tags associated to the language
  _WRAP_METHOD(Glib::SListHandle<Glib::RefPtr<SourceTag> > get_tags() const, gtk_source_language_get_tags)

  /// \brief Gets the value of the ESC character in the given language.
  ///
  /// \return the value of the ESC character in the given language.
  _WRAP_METHOD(gunichar get_escape_char() const, gtk_source_language_get_escape_char)

  /// \brief gets the list of mime types for the given language.
  ///
  /// After usage you should free each element of the list as well as the list itself.
  /// \return the list of  mime types for the given language.
  _WRAP_METHOD(Glib::SListHandle<Glib::ustring> get_mime_types() const, gtk_source_language_get_mime_types)

  /// \brief Sets a list of mime_types for the given language.
  ///
  /// \param mime_types the list of new mime types to set.
  _WRAP_METHOD(void set_mime_types(const Glib::SListHandle<const Glib::ustring>& mime_types), gtk_source_language_set_mime_types)
  
  /// \brief gets the style scheme associated to the language.
  ///
  /// \return the style scheme associated to the language
  _WRAP_METHOD(Glib::RefPtr<SourceStyleScheme> get_style_scheme() const, gtk_source_language_get_style_scheme, refreturn)

  /// \brief sets the style scheme associated to the language
  ///
  /// \param scheme the new style scheme
  _WRAP_METHOD(void set_style_scheme(Glib::RefPtr<SourceStyleScheme> scheme), gtk_source_language_set_style_scheme)

  /// \brief gets the style of the tag which ID is tag_id .
  ///
  /// \param tag_id the tag ID
  /// \return the style of the tag which ID is tag_id
  _WRAP_METHOD(SourceTagStyle get_tag_style(const Glib::ustring& tag_id) const, gtk_source_language_get_tag_style)

  /// \brief sets the style of the tag which ID is tag_id
  ///
  /// \param tag_id the tag ID
  /// \param style the new style.
  _WRAP_METHOD(void set_tag_style(const Glib::ustring& tag_id, const SourceTagStyle& style), gtk_source_language_set_tag_style)

  /// \brief gets the default style of the tag which ID is tag_id
  ///
  /// \param tag_id the ID of the tag to consider
  /// \return the default SourceTagStyle.
  _WRAP_METHOD(SourceTagStyle get_tag_default_style(const Glib::ustring& tag_id) const, gtk_source_language_get_tag_default_style)

};

} /* namespace gtksourceview */
