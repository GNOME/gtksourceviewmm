/* sourceview.h
 *
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C) 2005-2006 Dodji Seketeli
 * Copyright (C) 2009 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/// \file
/// \brief SourceView class

#include <gtkmm/textview.h>
#include <gtksourceviewmm/sourcebuffer.h>
#include <gtksourceviewmm/sourcegutter.h>
#include <gtksourceviewmm/sourcecompletion.h>

_DEFS(gtksourceviewmm,gtksourceview)
_PINCLUDE(gtkmm/private/textview_p.h)

namespace gtksourceview
{

class SourceGutter;
class SourceCompletion;

_WRAP_ENUM(SourceSmartHomeEndType, GtkSourceSmartHomeEndType)
_WRAP_ENUM(SourceDrawSpacesFlags, GtkSourceDrawSpacesFlags)

/// \brief Multi-line source editing widget.
///
/// It displays a Gtk::SourceBuffer.
class SourceView : public Gtk::TextView
{
  _CLASS_GTKOBJECT(SourceView, GtkSourceView, GTK_SOURCE_VIEW, Gtk::TextView, GtkTextView)

public:
  //_CTOR_DEFAULT(gtk_source_view_new_val) ;
  //_WRAP_CTOR (SourceView (const Glib::RefPtr<SourceBuffer> &buffer), gtk_source_view_new_with_buffer)

  /// \brief default constructor
  explicit SourceView () ;

  /// \brief constructor.
  ///
  /// create an instance of SourceView displaying a given buffer
  /// \param buffer the buffer to display in the SourceView
  explicit SourceView (const Glib::RefPtr<SourceBuffer> &buffer) ;


  _WRAP_CREATE()
  _WRAP_CREATE(const Glib::RefPtr<SourceBuffer> &buffer)

  /// \brief get the source buffer associated to the current instance
  ///
  /// \return the source buffer associated to the current instance
  Glib::RefPtr<const SourceBuffer> get_source_buffer () const ;

  /// \brief get the source buffer associated to the current instance
  ///
  /// \return the source buffer associated to the current instance
  Glib::RefPtr<SourceBuffer> get_source_buffer () ;

  /// \brief set the source buffer to be displayed by the SourceView
  ///
  /// \param source_buffer the source buffer to set
  void set_source_buffer (const Glib::RefPtr<SourceBuffer> &source_buffer) ;

  /// \brief display line numbers beside the text, or not
  ///
  /// \param show if true, line numbers will be displayed beside test text.
  _WRAP_METHOD(void set_show_line_numbers(bool show=true), gtk_source_view_set_show_line_numbers)

  /// \brief test whether line numbers are displayed beside the text
  ///
  /// \return true if line numbers are displayed beside the text, false otherwise
  _WRAP_METHOD(bool get_show_line_numbers() const, gtk_source_view_get_show_line_numbers)

  /// \brief set tabs width
  ///
  /// \param width the new tab width
  _WRAP_METHOD(void set_tab_width(guint width), gtk_source_view_set_tab_width)

  /// \brief get tab width
  ///
  /// \return the tab width
  _WRAP_METHOD(guint get_tab_width() const, gtk_source_view_get_tab_width)

  /// \brief set automatic text indention or not
  ///
  /// \param enable if true, automatic text indentation is activated
  _WRAP_METHOD(void set_auto_indent(bool enable=true), gtk_source_view_set_auto_indent)

  /// \brief test whether automatic text indentation is activated
  ///
  /// \return true if automatic text indentation is activated, false otherwise
  _WRAP_METHOD(bool get_auto_indent() const, gtk_source_view_get_auto_indent)

  /// \brief activate (or de-activate) the replacement of any inserted tabulator character by a group of space character
  ///
  /// \param enable if true, any tabulator character inserted is replaced by a group of space character
  _WRAP_METHOD(void set_insert_spaces_instead_of_tabs(bool enable=true), gtk_source_view_set_insert_spaces_instead_of_tabs)

  /// \brief test whether the replacement of any inserted tabulator character by a group of space character is activated
  ///
  /// \return true if the replacement of any inserted tabulator character by a group of space character is activated, false otherwise
  _WRAP_METHOD(bool get_insert_spaces_instead_of_tabs() const, gtk_source_view_get_insert_spaces_instead_of_tabs)

  /// \brief activate (or de-activate) the display of a margin
  ///
  /// \param show if true, activate the display of a margin
  _WRAP_METHOD(void set_show_right_margin(bool show = true), gtk_source_view_set_show_right_margin)

  /// \brief test if a margin is displayed
  ///
  /// \return true if a margin is displayed, false otherwise
  _WRAP_METHOD(bool get_show_right_margin() const, gtk_source_view_get_show_right_margin)

  /// \brief do highlight the currently selected line, or not
  ///
  /// \param highlight if true, do highlight the currently selected line
  _WRAP_METHOD(void set_highlight_current_line(bool highlight=true), gtk_source_view_set_highlight_current_line)

  /// \brief test if the currently selected line is to be hightlighted
  ///
  /// \return true if the currently selected line is to be highlighted, false otherwise
  _WRAP_METHOD(bool get_highlight_current_line() const, gtk_source_view_get_highlight_current_line)

  /// \brief  set the position of the right margin
  ///
  /// \param margin the position (in pixels) of the right margin
  _WRAP_METHOD(void set_right_margin_position(guint margin), gtk_source_view_set_right_margin_position)

  /// \brief get the position of the right margin
  ///
  /// \return the position of the right margin
  _WRAP_METHOD(guint get_right_margin_position() const, gtk_source_view_get_right_margin_position)

  /// \brief activate whether if HOME and END keys will move to the first/last non space character of the line before moving to the start/end
  ///
  /// if true, HOME and END keys will move to the first/last non space character of the line before moving to the start/end
  _WRAP_METHOD(void set_smart_home_end(SourceSmartHomeEndType smart_he), gtk_source_view_set_smart_home_end)

  /// \brief test whether if HOME and END keys will move to the first/last non space character of the line before moving to the start/end
  ///
  /// \return true if HOME and END keys will move to the first/last non space character of the line before moving to the start/end, false otherwise
  _WRAP_METHOD(SourceSmartHomeEndType get_smart_home_end() const, gtk_source_view_get_smart_home_end)

  /// \brief if true line marks will be displayed beside the text.
  ///
  /// \param show whether line marks should be displayed.
  _WRAP_METHOD(void set_show_line_marks(bool show = true), gtk_source_view_set_show_line_marks)

  /// \brief Returns whether line marks are displayed beside the text.
  ///
  /// \return true if the line marks are displayed.
  _WRAP_METHOD(bool get_show_line_marks() const, gtk_source_view_get_show_line_marks)

  /// If true, when the tab key is pressed and there is a
  /// selection, the selected text is indented of one level instead of being
  /// replaced with the \t characters. Shift+Tab unindents the selection.
  /// \param show true if the selection is indented when tab is pressed.
  _WRAP_METHOD(void set_indent_on_tab(bool show = true), gtk_source_view_set_indent_on_tab)

  /// Returns whether when the tab key is pressed the current selection
  /// should get indented instead of replaced with the \t character.
  ///
  /// \return true if the selection is indented when tab is pressed.
  _WRAP_METHOD(bool get_indent_on_tab() const, gtk_source_view_get_indent_on_tab)

  /// \brief Sets the number of spaces to use for each step of indent.
  ///
  /// If width is
  /// -1, the value of the GtkSourceView::tab-width property will be used.
  ///
  /// \param width indent width in characters
  _WRAP_METHOD(void set_indent_width(gint width), gtk_source_view_set_indent_width)

  /// \brief Set Returns the number of spaces to use for each step of indent.
  ///
  /// See SourceView::set_indent_width(gint) for details.
  ///
  /// \return indent width.
  _WRAP_METHOD(gint get_indent_width() const, gtk_source_view_get_indent_width)

  /// \brief Set the priority for the given mark category.
  ///
  /// When there are multiple
  /// marks on the same line, marks of categories with higher priorities will
  /// be drawn on top.
  /// \param category a mark category.
  /// \param priority the priority of #category
  _WRAP_METHOD(void set_mark_category_priority(const Glib::ustring& category, gint priority), gtk_source_view_set_mark_category_priority)

  /// \brief Gets the priority which is associated with the given category.
  ///
  /// \param category a mark category.
  /// \return the priority or if category exists but no priority was set,
  /// it defaults to 0.
  _WRAP_METHOD(gint get_mark_category_priority(const Glib::ustring& category) const, gtk_source_view_get_mark_category_priority)

#ifndef GTKSOURCEVIEWMM_DISABLE_DEPRECATED
  /// \brief Associates a given pixbuf with a given mark category.
  /// If pixbuf is NULL, the pixbuf is unset.
  ///
  /// \param category a mark category.
  /// \param pixbuf the pixbuf to associate the mark category to.
  ///
  /// \deprecated Use set_mark_category_icon().
  void set_mark_category_pixbuf(const Glib::ustring& category, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf);

  _IGNORE(gtk_source_view_get_mark_category_pixbuf)
  /// \brief Gets the pixbuf which is associated with the given mark category.
  ///
  /// \param category a mark category.
  /// \return empty Glib::RefPtr<Gdk::Pixbuf>.
  ///
  /// \deprecated Don't use it.
  Glib::RefPtr<Gdk::Pixbuf> get_mark_category_pixbuf(const Glib::ustring& category);

  /// \brief Gets the pixbuf which is associated with the given mark category.
  ///
  /// \param category a mark category.
  /// \return empty Glib::RefPtr<const Gdk::Pixbuf>.
  ///
  /// \deprecated Don't use it.
  Glib::RefPtr<const Gdk::Pixbuf> get_mark_category_pixbuf(const Glib::ustring& category) const;
#endif // GTKSOURCEVIEWMM_DISABLE_DEPRECATED

  _WRAP_METHOD(void set_mark_category_icon(const Glib::ustring& category, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf), gtk_source_view_set_mark_category_icon_from_pixbuf)
  _WRAP_METHOD(void set_mark_category_icon(const Glib::ustring& category, const Gtk::StockID& stock_id), gtk_source_view_set_mark_category_icon_from_stock)
  _WRAP_METHOD(void set_mark_category_icon(const Glib::ustring& category, const Glib::ustring& icon_name), gtk_source_view_set_mark_category_icon_from_icon_name)

#m4 _CONVERSION(`const Gdk::Color&',`const GdkColor*',`($3).gobj()')
  _WRAP_METHOD(void set_mark_category_background(const Glib::ustring& category, const Gdk::Color& color), gtk_source_view_set_mark_category_background)
#m4 _CONVERSION(`Gdk::Color&',`GdkColor*',`($3).gobj()')
  _WRAP_METHOD(bool set_mark_category_background(const Glib::ustring& category, Gdk::Color& dest) const, gtk_source_view_get_mark_category_background)
  /// \brief Set if and how the spaces should be visualized.
  ///
  /// \param flags specifing how white spaces should be displayed.
  _WRAP_METHOD(void set_draw_spaces(SourceDrawSpacesFlags flags = SOURCE_DRAW_SPACES_ALL), gtk_source_view_set_draw_spaces)

  /// \brief Returns the SourceDrawSpacesFlags specifying if and how
  /// spaces should be displayed for this view
  ///
  /// \return flags the SourceDrawSpacesFlags, 0 if no spaces should be drawn.
  _WRAP_METHOD(SourceDrawSpacesFlags get_draw_spaces() const, gtk_source_view_get_draw_spaces)

  /// For instance,
  /// Glib::ustring on_mark_tooltip(const Glib::RefPtr<SourceMark>& mark);
  typedef sigc::slot<Glib::ustring, const Glib::RefPtr<SourceMark>& /* mark */> SlotMarkTooltip;

  _IGNORE(gtk_source_view_set_mark_category_tooltip_func, gtk_source_view_set_mark_category_tooltip_markup_func)
  void set_mark_category_tooltip_func(const Glib::ustring& category, const SlotMarkTooltip& slot);
  void set_mark_category_tooltip_markup_func(const Glib::ustring& category, const SlotMarkTooltip& slot);
#m4 _CONVERSION(`GtkSourceGutter*',`Glib::RefPtr<SourceGutter>',`Glib::wrap($3)')
#m4 _CONVERSION(`GtkSourceGutter*',`Glib::RefPtr<const SourceGutter>',`Glib::wrap($3)')
  _WRAP_METHOD(Glib::RefPtr<SourceGutter> get_gutter(Gtk::TextWindowType window_type), gtk_source_view_get_gutter, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const SourceGutter> get_gutter(Gtk::TextWindowType window_type) const, gtk_source_view_get_gutter, refreturn, constversion)

#m4 _CONVERSION(`GtkSourceCompletion*',`SourceCompletion*',`Glib::wrap($3)')
#m4 _CONVERSION(`GtkSourceCompletion*',`const SourceCompletion*',`Glib::wrap($3)')
  _WRAP_METHOD(SourceCompletion* get_completion(), gtk_source_view_get_completion, refreturn)
  _WRAP_METHOD(const SourceCompletion* get_completion() const, gtk_source_view_get_completion, refreturn, constversion)

  _WRAP_SIGNAL(void redo(), "redo")
  _WRAP_SIGNAL(void undo(), "undo")
  _WRAP_SIGNAL(void show_completion(), "show-completion", no_default_handler)
//#m4 _CONVERSION(`GtkTextIter*',`const Gtk::TextIter&',`Glib::wrap($3)')
  _WRAP_SIGNAL(void line_mark_activated(Gtk::TextIter& mark, GdkEvent* event), "line-mark-activated")


  /// \brief Whether to display line numbers
  ///
  /// default value is false
  _WRAP_PROPERTY("show-line-numbers", bool)

  /// \brief Whether to display line mark pixbufs
  ///
  /// default value is false.
  _WRAP_PROPERTY("show-line-marks", bool)

  /// \brief Width of an tab character expressed in number of spaces.
  ///
  /// Allowed values are [1,32]
  /// Default value is 8
  _WRAP_PROPERTY("tab-width", guint)

  /// \brief Width of an indentation step expressed in number of spaces.
  ///
  /// Allowed values are [-1,32]
  /// Default value is -1
  _WRAP_PROPERTY("indent-width", int)

  /// \brief Whether to enable auto indentation.
  ///
  /// Default value is false
  _WRAP_PROPERTY("auto_indent", bool)

  /// \brief Whether to insert spaces instead of tabs.
  ///
  /// Default value is false
  _WRAP_PROPERTY("insert_spaces_instead_of_tabs", bool)

  /// \brief Whether to display the right margin.
  ///
  /// Default value is false
  _WRAP_PROPERTY("show-right-margin", bool)

  /// \brief Position of the right margin.
  ///
  /// Allowed values are [1,200]
  /// Default value is 80
  _WRAP_PROPERTY("right-margin-position", guint)

  /// \brief Set the behavior of the HOME and END keys.
  ///
  /// Default value is GTK_SOURCE_SMART_HOME_END_DISABLED
  _WRAP_PROPERTY("smart_home_end", SourceSmartHomeEndType)

  /// \brief Whether to highlight the current line.
  ///
  /// Default value is false
  _WRAP_PROPERTY("highlight_current_line", bool)

  /// \brief Whether to indent the selected text when the tab key is
  /// pressed.
  ///
  /// Default value is true.
  _WRAP_PROPERTY("indent_on_tab", bool)

  /// \brief Set if and how the spaces should be visualized.
  ///
  /// Default value is 0.
  _WRAP_PROPERTY("draw-spaces", SourceDrawSpacesFlags)

};

} /* namespace gtksourceview */

