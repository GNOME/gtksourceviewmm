/* sourceview.h
 *
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C) 2005-2006 Dodji Seketeli
 * Copyright (C) 2009, 2010 Krzesimir Nowak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/textview.h>
#include <gtksourceviewmm/sourcebuffer.h>
#include <gtksourceviewmm/sourcegutter.h>
#include <gtksourceviewmm/sourcecompletion.h>

_DEFS(gtksourceviewmm,gtksourceview)
_PINCLUDE(gtkmm/private/textview_p.h)

namespace gtksourceview
{

class SourceGutter;
class SourceCompletion;

/** Defines a behaviour of smart Home/End keys.
 */
_WRAP_ENUM(SourceSmartHomeEndType, GtkSourceSmartHomeEndType)
/** @var SourceSmartHomeEndType SOURCE_SMART_HOME_END_DISABLED
 * Smart-home-end disabled.
 */
/** @var SourceSmartHomeEndType SOURCE_SMART_HOME_END_BEFORE
 * Move to the first/last non-whitespace character on the first press of the
 * HOME/END keys and to the beginning/end of the line on the second press.
 */
/** @var SourceSmartHomeEndType SOURCE_SMART_HOME_END_AFTER
 * Move to the beginning/end of the line on the first press of the HOME/END keys
 * and to the first/last non-whitespace character on the second press.
 */
/** @var SourceSmartHomeEndType SOURCE_SMART_HOME_END_ALWAYS
 * Always move to the first/last non-whitespace character when the HOME/END keys
 * are pressed.
 */

/** Determines what kind of whitespaces whould be drawn.
 */
_WRAP_ENUM(SourceDrawSpacesFlags, GtkSourceDrawSpacesFlags)
/** @var SourceDrawSpacesFlags SOURCE_DRAW_SPACES_SPACE
 * Whether the space character should be drawn.
 */
/** @var SourceDrawSpacesFlags SOURCE_DRAW_SPACES_TAB
 * Whether the tab character should be drawn.
 */
/** @var SourceDrawSpacesFlags SOURCE_DRAW_SPACES_NEWLINE
 * Whether the line breaks should be drawn.
 */
/** @var SourceDrawSpacesFlags SOURCE_DRAW_SPACES_NBSP
 * Whether the non-breaking whitespaces should be drawn.
 */
/** @var SourceDrawSpacesFlags SOURCE_DRAW_SPACES_ALL
 * Wheter all kind of whitespaces should be drawn.
 */

/** The view object.
 *
 * SourceView is the main object of the gtksourceviewmm library. It provides
 * a text view which has syntax highlighting, undo/redo and text marks. Use a
 * SourceBuffer to display text with a GtkSourceView.
 */
class SourceView : public Gtk::TextView
{
  _CLASS_GTKOBJECT(SourceView, GtkSourceView, GTK_SOURCE_VIEW, Gtk::TextView, GtkTextView)

public:
  /// The gutter position of the lines renderer.
  static const int gutter_position_lines = -30;
  /// The gutter position of the marks renderer.
  static const int gutter_position_marks = -20;

  /** Creates a new SourceView.
   *
   * An empty default buffer will be created for you. If you want to specify
   * your own buffer, consider the other constructor.
   *
   * @return A new SourceView.
   */
  explicit SourceView () ;

  /** Creates a new SourceView widget displaying the buffer @a buffer.
   *
   * One buffer can be shared among many widgets.
   *
   * @param buffer A SourceBuffer.
   *
   * @return: A new SourceView.
   **/
  explicit SourceView (const Glib::RefPtr<SourceBuffer> &buffer) ;

  /** Returns the GtkTextBuffer being displayed by this text view.
   *
   * @return A SourceBuffer.
   */
  Glib::RefPtr<const SourceBuffer> get_source_buffer () const ;

  /** Returns the GtkTextBuffer being displayed by this text view.
   *
   * @return A SourceBuffer.
   */
  Glib::RefPtr<SourceBuffer> get_source_buffer () ;

  /** Sets a source_buffer as the buffer being displayed by source view.
   *
   * The previous buffer displayed by the text view is unreferenced, and a
   * reference is added to buffer.
   *
   * @param source_buffer A SourceBuffer.
   */
  void set_source_buffer (const Glib::RefPtr<SourceBuffer> &source_buffer) ;

  _WRAP_METHOD(void set_show_line_numbers(bool show=true), gtk_source_view_set_show_line_numbers)

  /** Returns whether line numbers are displayed beside the text.
   *
   * @return @c true if the line numbers are displayed.
   */
  _WRAP_METHOD(bool get_show_line_numbers() const, gtk_source_view_get_show_line_numbers)

  _WRAP_METHOD(void set_tab_width(guint width), gtk_source_view_set_tab_width)

  /** Returns the width of tabulation in characters.
   *
   * @return Width of tab.
   */
  _WRAP_METHOD(guint get_tab_width() const, gtk_source_view_get_tab_width)

  _WRAP_METHOD(void set_auto_indent(bool enable=true), gtk_source_view_set_auto_indent)

  /** Returns whether auto indentation of text is enabled.
   *
   * @return @c true if auto indentation is enabled.
   */
  _WRAP_METHOD(bool get_auto_indent() const, gtk_source_view_get_auto_indent)

  _WRAP_METHOD(void set_insert_spaces_instead_of_tabs(bool enable=true), gtk_source_view_set_insert_spaces_instead_of_tabs)

  /** Returns whether when inserting a tabulator character it should
   *  be replaced by a group of space characters.
   *
   * @return @c true if spaces are inserted instead of tabs.
   */
  _WRAP_METHOD(bool get_insert_spaces_instead_of_tabs() const, gtk_source_view_get_insert_spaces_instead_of_tabs)

  _WRAP_METHOD(void set_show_right_margin(bool show = true), gtk_source_view_set_show_right_margin)

  /** Returns whether a right margin is displayed.
   *
   * @return @c true if the right margin is shown.
   */
  _WRAP_METHOD(bool get_show_right_margin() const, gtk_source_view_get_show_right_margin)

  /** If @a highlight is @c true the current line is highlighted.
   *
   * @param highlight Whether to highlight the current line.
   */
  _WRAP_METHOD(void set_highlight_current_line(bool highlight = true), gtk_source_view_set_highlight_current_line)

  /** Returns whether the current line is highlighted.
   *
   * @return @c true if the current line is highlighted.
   */
  _WRAP_METHOD(bool get_highlight_current_line() const, gtk_source_view_get_highlight_current_line)

  /** Sets the position of the right margin.
   *
   * @param margin The width in characters where to position the right margin.
   */
  _WRAP_METHOD(void set_right_margin_position(guint margin), gtk_source_view_set_right_margin_position)

  /** Gets the position of the right margin.
   *
   * @return The position of the right margin.
   */
  _WRAP_METHOD(guint get_right_margin_position() const, gtk_source_view_get_right_margin_position)

  /** Set the desired movement of the cursor when HOME and END keys are pressed.
   *
   * @param smart_he The desired behavior among SourceSmartHomeEndType.
   */
  _WRAP_METHOD(void set_smart_home_end(SourceSmartHomeEndType smart_he), gtk_source_view_set_smart_home_end)

  /** Returns a SourceSmartHomeEndType end value specifying how the cursor will
   *  move when HOME and END keys are pressed.
   *
   * @return A SourceSmartHomeEndType value.
   */
  _WRAP_METHOD(SourceSmartHomeEndType get_smart_home_end() const, gtk_source_view_get_smart_home_end)

  /** If @c true line marks will be displayed beside the text.
   *
   * @param show Whether line marks should be displayed.
   *
   * @newin{2,2}
   */
  _WRAP_METHOD(void set_show_line_marks(bool show = true), gtk_source_view_set_show_line_marks)

  /** Returns whether line marks are displayed beside the text.
   *
   * @return @c true if the line marks are displayed.
   *
   * @newin{2,2}
   */
  _WRAP_METHOD(bool get_show_line_marks() const, gtk_source_view_get_show_line_marks)

  /** If @c true, when the tab key is pressed and there is a selection, the
   *  selected text is indented of one level instead of being replaced with
   *  the @\t characters. Shift+Tab unindents the selection.
   *
   * @param enable Whether to indent a block when tab is pressed.
   *
   * @newin{2,2}
   */
  _WRAP_METHOD(void set_indent_on_tab(bool enable = true), gtk_source_view_set_indent_on_tab)

  /** Returns whether when the tab key is pressed the current selection
   *  should get indented instead of replaced with the @\t character.
   *
   * @return @c true if the selection is indented when tab is pressed.
   *
   * @newin{2,2}
   */
  _WRAP_METHOD(bool get_indent_on_tab() const, gtk_source_view_get_indent_on_tab)

  /** Sets the number of spaces to use for each step of indent.
   *
   * If @a width is -1, the value of the SourceView::property_tab_width property
   * will be used.
   *
   * @param width Indent width in characters.
   */
  _WRAP_METHOD(void set_indent_width(gint width), gtk_source_view_set_indent_width)

  /** Returns the number of spaces to use for each step of indent.
   *
   * See set_indent_width() for details.
   *
   * @return Indent width.
   */
  _WRAP_METHOD(gint get_indent_width() const, gtk_source_view_get_indent_width)

  /** Set the @a priority for the given mark @a category.
   *
   * When there are multiple marks on the same line, marks of categories with
   * higher priorities will be drawn on top.
   *
   * @param category A mark category.
   * @param priority The priority for the category.
   *
   * @newin{2,2}
   */
  _WRAP_METHOD(void set_mark_category_priority(const Glib::ustring& category, gint priority), gtk_source_view_set_mark_category_priority)

  /** Gets the priority which is associated with the given @a category.
   *
   * @param category A mark category.
   *
   * @return The priority or if @a category exists but no priority was set, it
   * defaults to 0.
   *
   * @newin{2,2}
   */
  _WRAP_METHOD(gint get_mark_category_priority(const Glib::ustring& category) const, gtk_source_view_get_mark_category_priority)

  _IGNORE(gtk_source_view_set_mark_category_pixbuf, gtk_source_view_get_mark_category_pixbuf)

  /** Sets the icon to be used for @a category to @a pixbuf.
   *
   * @param category A mark category.
   * @param pixbuf A Gdk::Pixbuf or empty Glib::RefPtr.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(void set_mark_category_icon(const Glib::ustring& category, const Glib::RefPtr<Gdk::Pixbuf>& pixbuf), gtk_source_view_set_mark_category_icon_from_pixbuf)

  /** Sets the icon to be used for @a category to the stock item @a stock_id.
   *
   * @param category A mark category.
   * @param stock_id The stock id.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(void set_mark_category_icon(const Glib::ustring& category, const Gtk::StockID& stock_id), gtk_source_view_set_mark_category_icon_from_stock)

  /** Sets the icon to be used for @a category to the named theme item @a name.
   *
   * @param category A mark category.
   * @param name The themed icon name.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(void set_mark_category_icon(const Glib::ustring& category, const Glib::ustring& name), gtk_source_view_set_mark_category_icon_from_icon_name)

  /** Unsets the icon used for @a category.
   *
   * @param category A mark category.
   *
   * @newin{2,10}
   */
  void unset_mark_category_icon(const Glib::ustring& category);

  /** Sets given background @a color for mark @a category.
   *
   * @param category A mark category.
   * @param color Background color.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(void set_mark_category_background(const Glib::ustring& category, const Gdk::Color& color), gtk_source_view_set_mark_category_background)

  /** Unsets background for mark @a category.
   *
   * @param category A mark category.
   *
   * @newin{2,10}
   */
  void unset_mark_category_background(const Glib::ustring& category);

  /** Gets the background color associated with given @a category.
   *
   * @param category A mark category.
   * @param dest Destination Gdk::Color structure to fill in.
   *
   * @return @c true if background color for @a category was set and @a dest is
   * set to a valid color, or @c false otherwise.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(bool get_mark_category_background(const Glib::ustring& category, Gdk::Color& dest) const, gtk_source_view_get_mark_category_background)

  /** Set if and how the spaces should be visualized.
   *
   * Specifying @a flags as 0 will disable display of spaces.
   *
   * @param flags SourceDrawSpacesFlags specifing how white spaces should be
   * displayed.
   */
  _WRAP_METHOD(void set_draw_spaces(SourceDrawSpacesFlags flags = SOURCE_DRAW_SPACES_ALL), gtk_source_view_set_draw_spaces)

  /** Returns the SourceDrawSpacesFlags specifying if and how spaces should be
   *  displayed.
   *
   * @return The SourceDrawSpacesFlags, 0 if no spaces should be drawn.
   */
  _WRAP_METHOD(SourceDrawSpacesFlags get_draw_spaces() const, gtk_source_view_get_draw_spaces)

  /** Slot holding a function.
   *
   * @par Prototype:
   * <tt>Glib::ustring on_mark_tooltip(const Glib::RefPtr<SourceMark>& mark);</tt>
   *
   * @newin{2,10}
   */
  typedef sigc::slot<Glib::ustring, const Glib::RefPtr<SourceMark>& /* mark */> SlotMarkTooltip;

  _IGNORE(gtk_source_view_set_mark_category_tooltip_func, gtk_source_view_set_mark_category_tooltip_markup_func)

  /** Set a SlotMarkTooltip used to set tooltip on marks from the given mark
   *  @a category.
   *
   * If you also specified a function with
   * set_mark_category_tooltip_markup_func() the markup variant takes
   * precedence.
   *
   * @code
   * static Glib::ustring
   * tooltip_func (gtksourceview::SourceMark *mark)
   * {
   *   return get_tooltip_for_mark(mark);
   * }
   *
   * ...
   *
   * SourceView view;
   *
   * view->set_mark_category_tooltip_func("other-mark",
   *                                      sigc::ptr_fun(&tooltip_func));
   * @endcode
   *
   * @param category A mark category.
   * @param slot A SlotMarkTooltip.
   *
   * @newin{2,10}
   */
  void set_mark_category_tooltip_func(const Glib::ustring& category, const SlotMarkTooltip& slot);

  /** Set a SlotMarkTooltip used to set tooltip on marks from the given mark
   *  @a category.
   *
   * See set_mark_category_tooltip_func() for more information.
   *
   * @param category A mark category.
   * @param slot A SlotMarkTooltip.
   *
   * @newin{2,10}
   */
  void set_mark_category_tooltip_markup_func(const Glib::ustring& category, const SlotMarkTooltip& slot);

  /** Unsets a function used to set tooltip marks from the given mark
   *  @a category.
   *
   * @param category A mark category.
   *
   * @newin{2,10}
   */
  void unset_mark_category_tooltip_func(const Glib::ustring& category);

  /** Returns the SourceGutter object associated with @a window_type for this
   *  view.
   *
   * Only Gtk::TEXT_WINDOW_LEFT and Gtk::TEXT_WINDOW_RIGHT are supported,
   * respectively corresponding to the left and right gutter. The line numbers
   * and mark category icons are rendered in the gutter corresponding to
   * Gtk::TEXT_WINDOW_LEFT.
   *
   * @param window_type The gutter window type
   *
   * @return The SourceGutter.
   *
   * @newin{2,10}
   **/
  _WRAP_METHOD(Glib::RefPtr<SourceGutter> get_gutter(Gtk::TextWindowType window_type), gtk_source_view_get_gutter, refreturn)

  /** Returns the SourceGutter object associated with @a window_type for this
   *  view.
   *
   * Only Gtk::TEXT_WINDOW_LEFT and Gtk::TEXT_WINDOW_RIGHT are supported,
   * respectively corresponding to the left and right gutter. The line numbers
   * and mark category icons are rendered in the gutter corresponding to
   * Gtk::TEXT_WINDOW_LEFT.
   *
   * @param window_type The gutter window type
   *
   * @return The SourceGutter.
   *
   * @newin{2,10}
   **/
  _WRAP_METHOD(Glib::RefPtr<const SourceGutter> get_gutter(Gtk::TextWindowType window_type) const, gtk_source_view_get_gutter, refreturn, constversion)

  /** Gets the SourceCompletion associated with this view.
   *
   * @return The SourceCompletion associated with this view.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(Glib::RefPtr<SourceCompletion> get_completion(), gtk_source_view_get_completion, refreturn)

  /** Gets the SourceCompletion associated with this view.
   *
   * @return The SourceCompletion associated with this view.
   *
   * @newin{2,10}
   */
  _WRAP_METHOD(Glib::RefPtr<const SourceCompletion> get_completion() const, gtk_source_view_get_completion, refreturn, constversion)

  /** Emitted when redo action is requested.
   */
  _WRAP_SIGNAL(void redo(), "redo")

  /** Emitted when undo action is requested.
   */
  _WRAP_SIGNAL(void undo(), "undo")
// TODO: remove no_default_handler when we will break API/ABI. krnowak

  /** Emitted when a line mark has been activated (for instance when there
   * was a button press in the line marks gutter).
   *
   * You can use @a iter to determine on which line the activation took place.
   *
   * @par Handler parameters:
   * iter A Gtk::TextIter.
   * event The GdkEvent that activated the event.
   */
  _WRAP_SIGNAL(void line_mark_activated(Gtk::TextIter& mark, GdkEvent* event), "line-mark-activated", no_default_handler)

  // these are keybinding signals, so we ignore them.
  _IGNORE_SIGNAL(show-completion)
  _IGNORE_SIGNAL(move-lines)

  _WRAP_PROPERTY("show-line-numbers", bool)

  _WRAP_PROPERTY("show-line-marks", bool)

  _WRAP_PROPERTY("tab-width", guint)

  _WRAP_PROPERTY("indent-width", int)

  _WRAP_PROPERTY("auto_indent", bool)

  _WRAP_PROPERTY("insert_spaces_instead_of_tabs", bool)

  _WRAP_PROPERTY("show-right-margin", bool)

  _WRAP_PROPERTY("right-margin-position", guint)

  _WRAP_PROPERTY("smart_home_end", SourceSmartHomeEndType)

  _WRAP_PROPERTY("highlight_current_line", bool)

  _WRAP_PROPERTY("indent_on_tab", bool)

  _WRAP_PROPERTY("draw-spaces", SourceDrawSpacesFlags)
};

} /* namespace gtksourceview */

